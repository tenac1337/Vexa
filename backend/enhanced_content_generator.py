#!/usr/bin/env python3
"""
Enhanced Content Generator using Gemini 1.5 Pro
Generates comprehensive content for Notion pages using Google's most powerful model
"""

import os
import sys
import json
import asyncio
from typing import Dict, Any, Optional
from google import genai
from google.genai import types

class EnhancedContentGenerator:
    def __init__(self):
        """Initialize the content generator with Gemini 1.5 Pro"""
        # Debug: Log environment variable status
        api_key = os.getenv('GOOGLE_API_KEY')
        print(f"🔍 Debug: GOOGLE_API_KEY environment variable {'SET' if api_key else 'NOT SET'}", file=sys.stderr)
        if api_key:
            print(f"🔍 Debug: API key length: {len(api_key)}", file=sys.stderr)
        
        if not api_key:
            raise ValueError("GOOGLE_API_KEY environment variable is required")
        
        self.client = genai.Client(api_key=api_key)
        
        # Use Gemini 1.5 Pro for comprehensive content generation
        self.model = 'gemini-1.5-pro-002'
        
        print(f"✅ Enhanced Content Generator initialized with model: {self.model}", file=sys.stderr)

    def generate_comprehensive_content(self, query: str, content_type: str = "research") -> Dict[str, Any]:
        """
        Generate comprehensive content using Gemini 1.5 Pro
        
        Args:
            query: User's query/topic
            content_type: Type of content to generate (research, notes, essay)
            
        Returns:
            Dictionary with generated content and metadata
        """
        try:
            # Validate content type
            valid_types = ["research", "notes", "essay", "detailed_report"]
            if content_type not in valid_types:
                raise ValueError(f"Invalid content type: {content_type}. Must be one of: {', '.join(valid_types)}")
            
            # Create a comprehensive prompt based on content type
            system_instruction = self._get_system_instruction(content_type)
            user_prompt = self._create_user_prompt(query, content_type)
            
            print(f"🔧 Generating {content_type} content for: {query}", file=sys.stderr)
            
            # Generate content with Gemini 1.5 Pro
            response = self.client.models.generate_content(
                model=self.model,
                contents=user_prompt,
                config=types.GenerateContentConfig(
                    system_instruction=system_instruction,
                    max_output_tokens=8000,  # Long-form content
                    temperature=0.7,  # Creative but focused
                    top_p=0.9,
                    top_k=40
                )
            )
            
            if not response.text:
                raise Exception("No content generated by the model")
            
            # Parse and structure the content
            content_data = self._structure_content(response.text, query, content_type)
            
            print(f"✅ Generated {len(response.text)} characters of content", file=sys.stderr)
            
            return {
                "success": True,
                "content": content_data,
                "metadata": {
                    "model": self.model,
                    "query": query,
                    "content_type": content_type,
                    "content_length": len(response.text),
                    "generated_at": self._get_timestamp()
                }
            }
            
        except Exception as e:
            print(f"❌ Error generating content: {str(e)}", file=sys.stderr)
            return {
                "success": False,
                "error": str(e),
                "metadata": {
                    "model": self.model,
                    "query": query,
                    "content_type": content_type,
                    "generated_at": self._get_timestamp()
                }
            }

    def _get_system_instruction(self, content_type: str) -> str:
        """Get system instruction based on content type"""
        instructions = {
            "research": """You are an expert research assistant. Generate comprehensive, well-structured research content that is:
            - Thoroughly researched and factually accurate
            - Well-organized with clear headings and sections
            - Rich in detail and insights
            - Formatted in clean markdown
            - Include relevant examples and case studies where appropriate
            - Provide actionable insights and conclusions""",
            
            "notes": """You are an expert notes writer based on the lecture topic. Generate deep analytical content that is:
            - Provides thorough analysis on certain topic
            - Includes multiple perspectives and viewpoints like Defination, What is it, How it works, etc. For every sub topic.
            - Include relevant examples and case studies where appropriate.
            - Include practice questions and answers for revision.
            - Well-organized with clear headings and sections
            - Formatted in clean markdown.""",
            
            "essay": """You are an expert essay writer. Generate comprehensive essay content that is:
            - A well written Introduction - Hook, Background, Thesis Statement, Outline
            - Body Paragraphs - Topic Details, Examples, Evidence, Analysis, Maintain Coherence
            - Conclusion - Restate Thesis, Summarize Key Points, Offer a Final Thought
            - Step-by-step and easy to follow
            - Practical and actionable
            - Well-organized with clear sections
            - Formatted in clean markdown.""",
            
            "detailed_report": """You are an expert report writer. Generate comprehensive, detailed report content that is:
            - Executive summary with key findings
            - Structured with clear sections and subsections
            - Data-driven analysis with insights
            - Professional tone and formatting
            - Includes background, methodology, findings, analysis, and recommendations
            - Well-researched with detailed explanations
            - Charts and data interpretation where applicable
            - Formatted in clean markdown with proper headings"""
        }
        
        if content_type not in instructions:
            raise ValueError(f"Unsupported content type: {content_type}")
        
        return instructions[content_type]

    def _create_user_prompt(self, query: str, content_type: str) -> str:
        """Create comprehensive user prompt"""
        prompts = {
            "research": f"""Create comprehensive research content about: {query}

Please provide:
1. Executive Summary
2. Background and Context
3. Key Findings and Insights
4. Detailed Analysis
5. Current Trends and Developments
6. Future Implications
7. Conclusion and Key Takeaways

Format the content in clean markdown with proper headings, bullet points, and structure.""",

            "notes": f"""Create comprehensive lecture notes about: {query}

Please provide everything in a detailed and comprehensive way:
1. Topic Overview
   - Definition
   - Key Concepts
   - Importance in the field

2. Detailed Explanation
   - Core principles
   - How it works
   - Key components
   - Real-world applications

3. Examples and Case Studies
   - Practical examples
   - Step-by-step explanations
   - Common use cases

4. Practice Questions
   - Conceptual questions
   - Problem-solving exercises
   - Sample answers with explanations

5. Summary and Key Points
   - Main takeaways
   - Important formulas/concepts to remember
   - Quick reference guide

Format the content in clean markdown with proper headings, bullet points, and clear section breaks.""",

            "essay": f"""Write a comprehensive essay about: {query}

Structure:
1. Introduction
   - Engaging hook
   - Background information
   - Clear thesis statement
   - Essay outline

2. Body Paragraphs (3-4)
   - Topic sentence for each paragraph
   - Supporting evidence and examples
   - Analysis and explanation
   - Smooth transitions between paragraphs

3. Conclusion
   - Restate thesis
   - Summarize main points
   - Final thought or call to action

Ensure:
- Clear argument development
- Logical flow between ideas
- Strong evidence and examples
- Academic tone and style
- Proper paragraph structure

Format in clean markdown with clear paragraph breaks and section headings.""",

            "detailed_report": f"""Based on the provided content, create a comprehensive detailed report with the following structure:

1. Executive Summary
   - Key findings overview
   - Main insights and conclusions
   - Critical recommendations

2. Background and Context
   - Problem statement or topic overview
   - Scope and objectives
   - Methodology (if applicable)

3. Detailed Findings and Analysis
   - In-depth examination of data/information
   - Charts, tables, and data interpretation
   - Comparative analysis where relevant
   - Trends and patterns identification

4. Discussion and Insights
   - Interpretation of findings
   - Implications and significance
   - Strengths and limitations
   - Risk assessment (if applicable)

5. Recommendations and Conclusions
   - Actionable recommendations
   - Implementation strategies
   - Future considerations
   - Final conclusions

Content to analyze: {query}

Ensure:
- Professional tone and formatting
- Data-driven analysis with evidence
- Clear section headings and subheadings
- Logical flow and structure
- Comprehensive coverage of the topic

Format in clean markdown with proper headings, bullet points, tables, and clear section breaks."""
        }
        
        if content_type not in prompts:
            raise ValueError(f"Unsupported content type: {content_type}")
        
        return prompts[content_type]

    def _structure_content(self, raw_content: str, query: str, content_type: str) -> Dict[str, Any]:
        """Structure the generated content"""
        # For detailed reports, extract the title from "Title: content" format
        if content_type == "detailed_report" and ":" in query:
            title = query.split(":", 1)[0].strip()
        else:
            title = query
            
        return {
            "title": title,
            "content_type": content_type,
            "body": raw_content,
            "word_count": len(raw_content.split()),
            "sections": self._extract_sections(raw_content)
        }

    def _extract_sections(self, content: str) -> list:
        """Extract section headings from markdown content"""
        sections = []
        lines = content.split('\n')
        
        for line in lines:
            line = line.strip()
            if line.startswith('#'):
                level = len(line) - len(line.lstrip('#'))
                title = line.lstrip('#').strip()
                if title:
                    sections.append({
                        "level": level,
                        "title": title
                    })
        
        return sections

    def _get_timestamp(self) -> str:
        """Get current timestamp"""
        from datetime import datetime
        return datetime.now().isoformat()

def main():
    """Main function to handle command line usage"""
    if len(sys.argv) < 2:
        print(json.dumps({
            "success": False,
            "error": "Usage: python enhanced_content_generator.py <query> [content_type]"
        }))
        sys.exit(1)
    
    query = sys.argv[1]
    content_type = sys.argv[2] if len(sys.argv) > 2 else "research"
    
    try:
        generator = EnhancedContentGenerator()
        result = generator.generate_comprehensive_content(query, content_type)
        print(json.dumps(result))  # Single line output instead of pretty-printed
        
    except Exception as e:
        print(json.dumps({
            "success": False,
            "error": str(e)
        }))
        sys.exit(1)

if __name__ == "__main__":
    main() 